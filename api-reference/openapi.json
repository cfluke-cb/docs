{
  "openapi": "3.1.0",
  "info": {
    "title": "OpenAPI Plant Store",
    "description": "A sample API that uses a plant store as an example to demonstrate features in the OpenAPI specification",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://sandbox.mintlify.com"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/plants": {
      "get": {
        "description": "Returns all plants from the system that the user has access to",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to return",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plant response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Plant"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "bash",
            "label": "List all unwatered plants",
            "source": "planter list -u"
          },
          {
            "lang": "javascript",
            "label": "List all unwatered plants",
            "source": "require('dotenv').config();\nconst {\n  CoinbasePrimeClient,\n  CoinbasePrimeCredentials,\n  ActivitiesService,\n} = require('../dist');\n\nconst creds = JSON.parse(process.env.PRIME_CREDENTIALS);\nconst portfolioId = process.env.PORTFOLIO_ID;\n\nconst credentials = new CoinbasePrimeCredentials(\n  creds.AccessKey,\n  creds.SecretKey,\n  creds.Passphrase\n);\n\nconst client = new CoinbasePrimeClient(credentials);\n\nconst service = new ActivitiesService(client);\nservice\n  .listPortfolioActivities({\n    portfolioId,\n  })\n  .then((activities) => {\n    console.dir(activities, { depth: null });\n  })\n  .catch((err) => console.log(err));"
          },
          {
            "lang": "go",
            "label": "List all portfolio activities",
            "source": "package main\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/coinbase-samples/prime-sdk-go/activities\"\n\t\"github.com/coinbase-samples/prime-sdk-go/client\"\n\t\"github.com/coinbase-samples/prime-sdk-go/credentials\"\n)\n\nfunc main() {\n\n\tcredentials, err := credentials.ReadEnvCredentials(\"PRIME_CREDENTIALS\")\n\tif err != nil {\n\t\tlog.Fatalf(\"unable to read credentials from environment: %v\", err)\n\t}\n\n\thttpClient, err := client.DefaultHttpClient()\n\tif err != nil {\n\t\tlog.Fatalf(\"unable to load default http client: %v\", err)\n\t}\n\n\tclient := client.NewRestClient(credentials, httpClient)\n\n\tactivitiesSvc := activities.NewActivitiesService(client)\n\n\trequest := &activities.ListActivitiesRequest{\n\t\tPortfolioId: credentials.PortfolioId,\n\t}\n\n\tresponse, err := activitiesSvc.ListActivities(context.Background(), request)\n\tif err != nil {\n\t\tlog.Fatalf(\"unable to list activities: %v\", err)\n\t}\n\n\toutput, err := json.MarshalIndent(response, \"\", \"  \")\n\tif err != nil {\n\t\tlog.Fatalf(\"error marshaling response to JSON: %v\", err)\n\t}\n\tfmt.Println(string(output))\n}"
          },
          {
            "lang": "javascript",
            "label": "List all portfolio activities",
            "source": "require('dotenv').config();\nconst {\n  CoinbasePrimeClient,\n  CoinbasePrimeCredentials,\n  ActivitiesService,\n} = require('../dist');\n\nconst creds = JSON.parse(process.env.PRIME_CREDENTIALS);\nconst portfolioId = process.env.PORTFOLIO_ID;\n\nconst credentials = new CoinbasePrimeCredentials(\n  creds.AccessKey,\n  creds.SecretKey,\n  creds.Passphrase\n);\n\nconst client = new CoinbasePrimeClient(credentials);\n\nconst service = new ActivitiesService(client);\nservice\n  .listPortfolioActivities({\n    portfolioId,\n  })\n  .then((activities) => {\n    console.dir(activities, { depth: null });\n  })\n  .catch((err) => console.log(err));"
          },
          {
            "lang": "javascript",
            "label": "List all order activities",
            "source": "require('dotenv').config();\nconst {\n  CoinbasePrimeClient,\n  CoinbasePrimeCredentials,\n  ActivitiesService,\n} = require('../dist');\n\nconst creds = JSON.parse(process.env.PRIME_CREDENTIALS);\nconst portfolioId = process.env.PORTFOLIO_ID;\n\nconst credentials = new CoinbasePrimeCredentials(\n  creds.AccessKey,\n  creds.SecretKey,\n  creds.Passphrase\n);\n\nconst client = new CoinbasePrimeClient(credentials);\n\nconst service = new ActivitiesService(client);\nservice\n  .listPortfolioActivities({\n    portfolioId,\n    categories: ['ACTIVITY_CATEGORY_ORDER']\n  })\n  .then((activities) => {\n    console.dir(activities, { depth: null });\n  })\n  .catch((err) => console.log(err));"
          }
        ]
      },
      "post": {
        "description": "Creates a new plant in the store",
        "requestBody": {
          "description": "Plant to add to the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPlant"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "plant response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plant"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/plants/{id}": {
      "delete": {
        "description": "Deletes a single plant based on the ID supplied",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of plant to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Plant deleted",
            "content": {}
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "webhooks": {
    "/plant/webhook": {
      "post": {
        "description": "Information about a new plant added to the store",
        "requestBody": {
          "description": "Plant added to the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPlant"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Plant": {
        "required": ["name"],
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the plant",
            "type": "string"
          },
          "tag": {
            "description": "Tag to specify the type",
            "type": "string"
          }
        }
      },
      "NewPlant": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Plant"
          },
          {
            "required": ["id"],
            "type": "object",
            "properties": {
              "id": {
                "description": "Identification number of the plant",
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ]
      },
      "Error": {
        "required": ["error", "message"],
        "type": "object",
        "properties": {
          "error": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}
